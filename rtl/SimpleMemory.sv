// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module mem_262144x32(	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  input  [17:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [17:0] R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [17:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:262143];	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  reg        _R0_en_d0;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  reg [17:0] _R0_addr_d0;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  always @(posedge R0_clk) begin	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    _R0_en_d0 <= R0_en;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    _R0_addr_d0 <= R0_addr;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  end // always @(posedge)
  reg        _R1_en_d0;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  reg [17:0] _R1_addr_d0;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  always @(posedge R1_clk) begin	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    _R1_en_d0 <= R1_en;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    _R1_addr_d0 <= R1_addr;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    if (W0_en & 1'h1)	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      Memory[W0_addr] <= W0_data;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      reg [31:0] _RANDOM;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      reg [31:0] _RANDOM_0;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    initial begin	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      `INIT_RANDOM_PROLOG_	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        for (logic [18:0] i = 19'h0; i < 19'h40000; i += 19'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
          Memory[i[17:0]] = _RANDOM_MEM;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        end	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        _RANDOM = {`RANDOM};	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        _RANDOM_0 = {`RANDOM};	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        _R0_addr_d0 = _RANDOM[18:1];	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        _R1_en_d0 = _RANDOM[19];	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
        _R1_addr_d0 = {_RANDOM[31:20], _RANDOM_0[5:0]};	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 32'bx;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
endmodule

module SimpleMemory(	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
  input         clock,	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
                reset,	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
  output        io_req_ready,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
  input         io_req_valid,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
  input  [31:0] io_req_bits_addr,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
                io_req_bits_data,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
  input  [3:0]  io_req_bits_mask,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
  input         io_req_bits_wen,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
                io_resp_ready,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
  output        io_resp_valid,	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
  output [31:0] io_resp_bits	// src/main/scala/soc/memory/SimpleMemory.scala:9:14
);

  wire [31:0] _mem_ext_R0_data;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  wire [31:0] _mem_ext_R1_data;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
  reg         resp_valid;	// src/main/scala/soc/memory/SimpleMemory.scala:26:27
  reg  [31:0] resp_data;	// src/main/scala/soc/memory/SimpleMemory.scala:27:22
  wire        _GEN = ~resp_valid & io_req_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/soc/memory/SimpleMemory.scala:26:27, :30:19
  wire        _GEN_0 = _GEN & io_req_bits_wen;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/soc/memory/SimpleMemory.scala:20:24, :35:21, :36:27
  always @(posedge clock) begin	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
    if (reset)	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      resp_valid <= 1'h0;	// src/main/scala/soc/memory/SimpleMemory.scala:8:7, :26:27
    else	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      resp_valid <=
        ~(io_resp_ready & resp_valid) & (_GEN ? ~io_req_bits_wen : resp_valid);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/soc/memory/SimpleMemory.scala:8:7, :20:24, :26:27, :35:21, :36:27, :50:28, :56:22, :57:16
    if (~_GEN | io_req_bits_wen) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/soc/memory/SimpleMemory.scala:27:22, :35:21, :36:27
    end
    else	// src/main/scala/soc/memory/SimpleMemory.scala:27:22, :35:21, :36:27
      resp_data <= _mem_ext_R0_data;	// src/main/scala/soc/memory/SimpleMemory.scala:20:24, :27:22
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      automatic logic [31:0] _RANDOM[0:1];	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
        end	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
        resp_valid = _RANDOM[1'h0][0];	// src/main/scala/soc/memory/SimpleMemory.scala:8:7, :26:27
        resp_data = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// src/main/scala/soc/memory/SimpleMemory.scala:8:7, :26:27, :27:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/soc/memory/SimpleMemory.scala:8:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  mem_262144x32 mem_ext (	// src/main/scala/soc/memory/SimpleMemory.scala:20:24
    .R0_addr (io_req_bits_addr[19:2]),	// src/main/scala/soc/memory/SimpleMemory.scala:50:28
    .R0_en   (_GEN & ~io_req_bits_wen),	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/soc/memory/SimpleMemory.scala:8:7, :20:24, :35:21, :36:27, :50:28
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_req_bits_addr[19:2]),	// src/main/scala/soc/memory/SimpleMemory.scala:38:30
    .R1_en   (_GEN_0),	// src/main/scala/soc/memory/SimpleMemory.scala:20:24, :35:21, :36:27
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_req_bits_addr[19:2]),	// src/main/scala/soc/memory/SimpleMemory.scala:23:36, :46:16
    .W0_en   (_GEN_0),	// src/main/scala/soc/memory/SimpleMemory.scala:20:24, :35:21, :36:27
    .W0_clk  (clock),
    .W0_data
      ({io_req_bits_mask[3] ? io_req_bits_data[31:24] : _mem_ext_R1_data[31:24],
        io_req_bits_mask[2] ? io_req_bits_data[23:16] : _mem_ext_R1_data[23:16],
        io_req_bits_mask[1] ? io_req_bits_data[15:8] : _mem_ext_R1_data[15:8],
        io_req_bits_mask[0] ? io_req_bits_data[7:0] : _mem_ext_R1_data[7:0]})	// src/main/scala/soc/memory/SimpleMemory.scala:20:24, :41:{12,29}, :42:29, :43:21, :45:22
  );
  assign io_req_ready = ~resp_valid;	// src/main/scala/soc/memory/SimpleMemory.scala:8:7, :26:27, :30:19
  assign io_resp_valid = resp_valid;	// src/main/scala/soc/memory/SimpleMemory.scala:8:7, :26:27
  assign io_resp_bits = resp_data;	// src/main/scala/soc/memory/SimpleMemory.scala:8:7, :27:22
endmodule

